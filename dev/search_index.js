var documenterSearchIndex = {"docs":
[{"location":"#OptimizationCallbacks","page":"OptimizationCallbacks","title":"OptimizationCallbacks","text":"","category":"section"},{"location":"","page":"OptimizationCallbacks","title":"OptimizationCallbacks","text":"This package contains a bunch of callable objects that can be useful as callbacks in optimization, such as progress logging (LogProgress), check point saving (CheckPointSaver), or evaluations on other functions, e.g. for tracking validation losses (Evaluator). These callbacks can be triggered with different mechanisms, either based on iteration step (IterationTrigger), on time (TimeTrigger), or on special events, e.g. at the end of optimization (EventTrigger). The package is tested with the popular Optimization.jl package, but it does not depend on it and can also be used in custom optimization procedures, or with other packages.","category":"page"},{"location":"","page":"OptimizationCallbacks","title":"OptimizationCallbacks","text":"Modules = [OptimizationCallbacks]","category":"page"},{"location":"#OptimizationCallbacks.OptimizationCallbacks","page":"OptimizationCallbacks","title":"OptimizationCallbacks.OptimizationCallbacks","text":"Callbacks for Optimization.jl\n\n\n\n\n\n","category":"module"},{"location":"#OptimizationCallbacks.Callback","page":"OptimizationCallbacks","title":"OptimizationCallbacks.Callback","text":"Callback(trigger, function; t = 0, extra = nothing, stop = (_, _, _, _) -> false)\n\nCallback((trigger1, trigger2, ...), function)\n\nSee triggers IterationTrigger, TimeTrigger, EventTrigger. For callback functions see LogProgress, CheckPointSaver.\n\nThe callback function has arguments Optimization.OptimizationState, value, t, extra.\n\nExample\n\njulia> using Optimization\n\njulia> using OptimizationCallbacks\n\njulia> import ForwardDiff\n\njulia> function rosenbrock(x, p)\n           (p[1] - x[1])^2 + p[2] * (x[2] - x[1]^2)^2\n       end\nrosenbrock (generic function with 1 method)\n\njulia> optf = OptimizationFunction(rosenbrock, AutoForwardDiff());\n\njulia> prob = OptimizationProblem(optf, [0., 0.], [1., 100.]);\n\njulia> callback = Callback(IterationTrigger(5), LogProgress());\n\njulia> sol = solve(prob, Optimization.LBFGS(); callback)\n eval   | current     | lowest      | highest\n_________________________________________________\n      5 |    0.460215 |    0.460215 |    0.460215\n     10 |    0.162607 |    0.162607 |    0.460215\n     15 |   0.0257404 |   0.0257404 |    0.460215\n     20 | 0.000911646 | 0.000911646 |    0.460215\n     25 | 1.04339e-13 | 1.04339e-13 |    0.460215\nretcode: Success\nu: 2-element Vector{Float64}:\n 0.9999997057368228\n 0.999999398151528\n\n\n\n\n\n\n","category":"type"},{"location":"#OptimizationCallbacks.CheckPointSaver","page":"OptimizationCallbacks","title":"OptimizationCallbacks.CheckPointSaver","text":"CheckPointSaver(filename; overwrite = false)\n\nSaves checkpoints as JLD2 files.\n\nExamples\n\njulia> using Optimization\n\njulia> using OptimizationCallbacks\n\njulia> import ForwardDiff\n\njulia> function rosenbrock(x, p)\n           (p[1] - x[1])^2 + p[2] * (x[2] - x[1]^2)^2\n       end;\n\njulia> optf = OptimizationFunction(rosenbrock, AutoForwardDiff());\n\njulia> prob = OptimizationProblem(optf, [0., 0.], [1., 100.]);\n\njulia> filename = tempname() * \".jld2\";\n\njulia> callback = Callback((IterationTrigger(5), EventTrigger((:end,))),\n                           CheckPointSaver(filename));\n\njulia> sol = solve(prob, Optimization.LBFGS(); callback);\n\njulia> OptimizationCallbacks.trigger!(callback, :end);\n\njulia> callback(Optimization.OptimizationState(u = sol.u, objective = sol.objective),\n                sol.objective);\n\njulia> using JLD2\n\njulia> checkpoint_dict = load(filename);\n\njulia> checkpoint_dict[\"15\"].u\n2-element Vector{Float64}:\n 0.8834203727171949\n 0.7694090396265355\n\n\n\n\n\n\n","category":"type"},{"location":"#OptimizationCallbacks.Evaluator","page":"OptimizationCallbacks","title":"OptimizationCallbacks.Evaluator","text":"Evaluator(f; T = Float64, label = :evaluation)\n\nEvaluate function f on state and store it in evaluations.\n\nExample\n\njulia> using Optimization\n\njulia> using OptimizationCallbacks\n\njulia> import ForwardDiff\n\njulia> function rosenbrock(x, p)\n           (p[1] - x[1])^2 + p[2] * (x[2] - x[1]^2)^2\n       end\nrosenbrock (generic function with 1 method)\n\njulia> optf = OptimizationFunction(rosenbrock, AutoForwardDiff());\n\njulia> prob = OptimizationProblem(optf, [0., 0.], [1., 100.]);\n\njulia> callback = Callback(IterationTrigger(5), Evaluator(x -> rosenbrock(x.u, [1., 90.])));\n\njulia> sol = solve(prob, Optimization.LBFGS(); callback);\n\njulia> callback.func.evaluations\n5-element Vector{Float64}:\n 0.45989873460740843\n 0.16216539624081874\n 0.024525435426304077\n 0.0009100921964470193\n 1.0256411872737028e-13\n\n\n\n\n\n","category":"type"},{"location":"#OptimizationCallbacks.EventTrigger","page":"OptimizationCallbacks","title":"OptimizationCallbacks.EventTrigger","text":"EventTrigger(events)\n\nTriggers at given events using the trigger! function.\n\nExample\n\njulia> using OptimizationCallbacks\n\njulia> callback = Callback(EventTrigger((:start, :end)), (_, value,_ ,_) -> @info( \"Current value: \" * string(value)));\n\njulia> begin\n           @info \"Start.\"\n           OptimizationCallbacks.trigger!(callback, :start)\n           callback(nothing, 10.)\n           callback(nothing, 9.)\n           callback(nothing, 7.)\n           OptimizationCallbacks.trigger!(callback, :end)\n           callback(nothing, 6.)\n       end;\n[ Info: Start.\n[ Info: Current value: 10.0\n[ Info: Current value: 6.0\n\n\n\n\n\n","category":"type"},{"location":"#OptimizationCallbacks.IterationTrigger","page":"OptimizationCallbacks","title":"OptimizationCallbacks.IterationTrigger","text":"IterationTrigger(Δi)\n\nTriggers every Δi iterations. See Callback for an example.\n\n\n\n\n\n","category":"type"},{"location":"#OptimizationCallbacks.LogProgress","page":"OptimizationCallbacks","title":"OptimizationCallbacks.LogProgress","text":"LogProgress()\n\nSee Callback for an example.\n\n\n\n\n\n","category":"type"},{"location":"#OptimizationCallbacks.TimeTrigger","page":"OptimizationCallbacks","title":"OptimizationCallbacks.TimeTrigger","text":"TimeTrigger(Δt)\n\nTriggers every Δt seconds.\n\nExample\n\njulia> using Optimization\n\njulia> using OptimizationCallbacks\n\njulia> import ForwardDiff\n\njulia> function rosenbrock(x, p)\n           sleep(.1)\n           (p[1] - x[1])^2 + p[2] * (x[2] - x[1]^2)^2\n       end\nrosenbrock (generic function with 1 method)\n\njulia> optf = OptimizationFunction(rosenbrock, AutoForwardDiff());\n\njulia> prob = OptimizationProblem(optf, [0., 0.], [1., 100.]);\n\njulia> callback = Callback(TimeTrigger(2.0), (_,_,_,_) -> @info(\"Hi\"));\n\njulia> sol = solve(prob, Optimization.LBFGS(); callback)\n[ Info: Hi\n[ Info: Hi\nretcode: Success\nu: 2-element Vector{Float64}:\n 0.9999997057368228\n 0.999999398151528\n\n\n\n\n\n\n","category":"type"},{"location":"#OptimizationCallbacks.reset!-Tuple{Callback}","page":"OptimizationCallbacks","title":"OptimizationCallbacks.reset!","text":"reset!(callback)\n\nResets internal states, like iteration counters, in a Callback.\n\nExample\n\njulia> using Optimization\n\njulia> using OptimizationCallbacks\n\njulia> callback = Callback(IterationTrigger(5), LogProgress());\n\njulia> for _ in 1:6\n           callback(Optimization.OptimizationState(), 17.); # arbitrary calls to callback\n       end\n eval   | current     | lowest      | highest\n_________________________________________________\n      5 |          17 |          17 |          17\n\njulia> callback.t\n6\n\njulia> callback.func.lowest\n17.0\n\njulia> OptimizationCallbacks.reset!(callback);\n\njulia> callback.t\n0\n\njulia> callback.func.lowest\nInf\n\n\n\n\n\n\n","category":"method"},{"location":"#OptimizationCallbacks.trigger!-Tuple{Any, Any}","page":"OptimizationCallbacks","title":"OptimizationCallbacks.trigger!","text":"trigger!(callback, event)\n\nTrigger EventTrigger with event. For example see EventTrigger or CheckPointSaver.\n\n\n\n\n\n","category":"method"}]
}
